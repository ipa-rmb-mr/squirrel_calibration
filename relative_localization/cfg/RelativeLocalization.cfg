#!/usr/bin/env python
PACKAGE = "robotino_calibration"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("update_rate", double_t, 0, "Defines how fast new measurements are averaged into the transformation estimate (new_value = (1-update_rate)*old_value + update_rate*measurement).", .75, 0, 1)
gen.add("child_frame_name", str_t, 0, "The name of the computed child frame.", "/landmark_reference_nav")

#gen.add("wall_length_left", double_t, 0, "The length of the wall segment left of the box's origin, in[m].", .8, 0., 100.)
#gen.add("wall_length_right", double_t, 0, "The length of the wall segment right of the box's origin, in[m].", .8, 0., 100.)
#gen.add("box_search_width", double_t, 0, "The maximum +/-y coordinate in laser scan to search for the localization box, in[m]", .6, 0., 100.)
#gen.add("max_wall_side_distance", double_t, 0, "The maximum distance of the side wall to the laser scanner, in[m]", 3.0, 0., 100.)

exit(gen.generate(PACKAGE, "relative_localization", "RelativeLocalization"))


######### examples:
#gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
#gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
#gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
#gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)
#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
# gen.const("Medium", int_t, 1, "A medium constant"),
# gen.const("Large", int_t, 2, "A large constant"),
# gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
# "An enum to set size")
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
